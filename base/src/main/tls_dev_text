client_hello

server_hello 02 2
certificate  0B 11   回调给客户端实现类校验证书
server_key_exchange 0C 12  读取参数hash签名校验 计算
server_hello_done 0E 14  读取客户端证书（认证信息） build certificate msg，ClientKeyExchange  establishMasterSecret  sendCertificateVerifyMessage sendChangeCipherSpec

HandshakeType.certificate  0B 11
HandshakeType.client_key_exchange 10 16
HandshakeType.certificate_verify 0F 15
ContentType.change_cipher_spec 14 20  ChangeCipherSpec 140303 0001 01  在接收到该协议后，所有接收到的数据都需要解密。
HandshakeType.finished (别名 Wireshark抓包软件：Encrypted handshake message)
        ：1.这条命令是当发送完change_cipher_spec消息后必须立即发送该消息。finished消息用于验证密钥交换和身份验证过程是否成功。
        2.这条命令格式 TLS协议TLV中的V部分加密后

16 0303 0028 0000000000000000D77591BB90877E105353C0250DE1FF407485ACE8F1BCC9922751CFD814D05BD6
TLS1.2协议设计原理
https://www.cnblogs.com/Jack-Blog/p/13170728.html#



16 0303 0046 10 0000424104C81B5D5C32ABD18887A5E2D77999A39E2C851BFB64499737E66AD4A5B7349F579F45932CE0F7F61CEF60CBD6556E02A697374D20908C3A804B601C5352FC7A3E
16 0303 004F 0F 00004B040300473045022069FFE6E4317B6C7866F0208D51361B248AEECDF2A07441B428606A764B4E3AB3022100A7FA26A2F74ECB14F5D7BF183E6CB3208F2640D6194993C551B1DE3BA778FF0A
14 0303 0001 01
16 0303 0028 00 0000000000000069C45FC1D7B4584E21A185B54A208BE207FB9B369877A53C6017AF5F17E52426

16030300280000000000000000D77591BB90877E105353C0250DE1FF407485ACE8F1BCC9922751CFD814D05BD6
1400000CEB6AA2587B91D6B2FC041E42

TlsClientProtocol.class
protected void handleHandshakeMessage(short type, HandshakeMessageInput buf)
569 sendFinishedMessage();

TlsProtocol.class
protected void sendFinishedMessage()
1476 HandshakeMessageOutput.send(this, HandshakeType.finished, verify_data);

HandshakeMessageOutput.class
44    void send(TlsProtocol protocol) throws IOException

TlsProtocol.class
    void writeHandshakeMessage(byte[] buf, int off, int len) throws IOException



            Elliptic Curve Cryptography (ECC) Cipher Suites
                   for Transport Layer Security (TLS)


              Client                                        Server
              ------                                        ------

              ClientHello          -------->
                                                       ServerHello
                                                      Certificate*
                                                ServerKeyExchange*
                                              CertificateRequest*+
                                   <--------       ServerHelloDone
              Certificate*+
              ClientKeyExchange
              CertificateVerify*+
              [ChangeCipherSpec]
              Finished             -------->
                                                [ChangeCipherSpec]
                                   <--------              Finished

              Application Data     <------->      Application Data


                   * message is not sent under some conditions
                   + message is not sent unless client authentication
                     is desired

                 Figure 1: Message flow in a full TLS handshake

                        https://www.rfc-editor.org/rfc/rfc4492


0.org.bouncycastle.jce.provider.BouncyCastleProvider

PROVIDER_NAME 修改BC 为 EC 解决Android系统已经基础BC库导致冲突；


1.org.bouncycastle.tls.TlsClientProtocol

sendClientHello函数中修改 构建ClientHello中的tls版本；


基础知识点

RFC 5246 TLS 1.2协议主体协议 ，2008年发布。
RFC 8446 TLS 1.3协议主体协议 ，2018年发布。

RFC网页索引
https://www.rfc-editor.org/retrieve/


RFC 5077 Tls Session协议，Session 在Tls1.2中继续保留，但是在Tls1.3(rfc8446)中已经取消，
         client not offering a pre-TLS 1.3 session MUST generate a new 32-byte value


signature_algorithms ：tls1.2以下（包括1.2）扩展字段中必须传参数



TLS 1.3 中Pre_shared_key和key_share对应的两种密钥交换模式
1、TLS1.3的整个协议的文档规范 请参照 RFC 8846，协议规范中指出，TLS1.3提供三方面的安全属性，分别是身份认证、通信加密、完整性验证。

2、TLS1.3协议主要包括两个组成部分，分别是握手协议、记录协议、其中记录协议包括了警告协议。而握手协议的主要作用是实现双方身份认证，协商加密模式，建立共享密钥参数，产生一个主秘钥用于后续记录协议使用加密应用层通信消息。

3、TLS1.3提供密钥交换模式一共有三种分别是：

       （EC)DHE （DDiffer-Hellman overr either finite fields or elliptic curves）（论文中讨论有限域上椭圆曲线秘钥交换模式）

         PSK -Only

         PSK with (EC)DHE (暂时还没有实现)

4、Pre_shared_key和key_share的内容区别

              key_share 是Client发送ClientHello中Extension中包含的一个对应Support_group中椭圆曲线的对应计算的公钥集（ECDHE）

              Pre_shared_key是PSK模式中

            （TLS1.3中删除了之前版本在中使用的会话票据，而是使用PSK模式建立会话恢复）

   其中加密协商的进程主要四个可选的扩展影响（Cipher_suite 表明AEAD算法、 HKDF算法 哈希对），（Support_group  包含ECDHE组）（Signature_algorithms签名算法）（Pre_shared_key 包含对称密钥标签）



server_key_exchange 0C 12
server_hello_done 0E 14