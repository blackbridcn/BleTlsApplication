



dpi：dot per inch，每英寸的像素点数。在电子显示范畴内它和PPI是一个意思。 只有在打印时这个缩写才有意义，
在打印领域不存在 PPI的叫法，只说DPI，它表示打印机每英寸打印几个像素点。宽高同样像素下，dpi越大，打印出来的图案越小。

dpi是屏幕像素密度，假如一英寸里面有160个像素，这个屏幕的像素密度就是160dpi，那么在这种情况下，dp和px如何换算呢？
在Android中，规定以160dpi为基准，1dip=1px，如果密度是320dpi，则1dip=2px，以此类推

density-independent pixel，叫dp或dip，与终端上的实际物理像素点无关，可以保证在不同屏幕像素密度的设备上显示相同的效果

scale-independent pixel，叫sp或sip ，Android开发时用此单位设置文字大小，可根据字体大小首选项进行缩放

Google官方指定按照下列标准进行区分：

                        px           dpi     密度范围           px/dp   	    density      log
低密度（ldpi）	        240x320	     120	 xxxdpi~120dpi    1dp=0.75px	 0.75        36X36px    3
中密度（mdpi）	        320x480	     160	 120dpi~160dpi    1dp=1px	     1           48x48px    4
高密度（hdpi）	        480x800	     240	 160dpi~240dpi    1dp=1.5px      1.5         72x72px    6
超高密度（xhdpi） 	    720x1280	 320	 120dpi~160dpi    1dp=2px	     2           96x96px    8
超超高密度（xxhdpi）	    1080x1920	 480	 320dpi~480dpi    1dp=3px	     3           144x144px  12
超超超高密度（xxxhdpi）	3840x2160	 640	 480dpi~640dpi    1dp=4px	     4           92x192px   16

1080X2029

ldpi:mdpi:hdpi:xhdpi:xxhdpi:xxxdpi = 0.75:1:1.5:2:3:4 = 3:4:6:8:12:16
上述比值乘以12，就是 36：48：72：144：192，刚好就是icon尺寸
我们会看到，最小宽度适配方案，values-hdpi 的值是 values-mdpi 的值乘以 0.8



在Android中，规定以160dpi（即屏幕分辨率为320x480）为基准：1dp=1px，
比如设计图是以720x1280 dpi：320为基准，
某控件标注宽为500px，那么我们在xml文件中设置该控件的宽时，
应设置为：500/（320/160） = 250dp。


先来理解下Android 加载资源过程

Android SDK会根据屏幕密度自动选择对应的资源文件进行渲染加载（自动渲染）
1.只提供大分辨率图片情况
SDK检测到你手机的分辨率是320x480（dpi=160），
会优先到drawable-mdpi文件夹下找对应的图片资源；
但假设你只在xhpdi文件夹下有对应的图片资源文件（mdpi文件夹是空的），
那么SDK会去xhpdi文件夹找到相应的图片资源文件，
然后将原有大像素的图片自动缩放成小像素的图片，
于是大像素的图片照样可以在小像素分辨率的手机上正常显示。
但是会消耗更多的内存

2.只提供小分辨率图片情况
如果只提供ldpi规格的图片，对于大分辨率（xdpi、xxdpi）的手机如果把图片放大就会不清晰


3.xhdpi 或者 xxhdpi 首选

目前市面上最普遍的高端机的分辨率 1080x1920

为什么需要屏幕适配
1.手机屏幕密度值density错误，导致系统在将dp装换为px时出现变形；
px=dp*density
px=dp*(dpi/160)
dpi是根据屏幕真实的分辨率和尺寸来计算的，每个设备都可能不一样的.

屏幕密度在系统中是通过，手机厂商写入一个 system/build.prop 文件，有时还会写错；


屏幕适配方式
1.宽高限定符
宽高限定符适配也可以叫屏幕分辨率适配，需要在res文件下创建各种针对不同屏幕分辨率对应的values文件夹；

当软件运行在手机上时，系统会根据手机的屏幕分辨率去找对应的values文件，如手机分别率是1280X800,
这个时候系统就会加载values-1280x800的dimens文件，这样设计图上设计的控件在手机上显示就正常了。
达到了适配的需求，简而言之就是，需要创建不同分辨率的文件夹，系统会根据当前手机的分辨率去加载对应文件。
如果手机的分辨率种类太多，就会造成需要创建的文件较多，导致apk包变大。
而且只有屏幕分辨率和文件完全匹配才能进行适配

2.SmallestWidth适配
SmallestWidth适配可以称为最小宽度适配。不管屏幕是横屏还是竖屏，都会以最小的那一边作为宽度进行适配。
SmallestWidth适配是以dp为单位进行适配，如设计图宽度为375，以最小宽度进行换算。

当手机宽度为300dp时，设计图上为375dp时，将300dp等分为375份，每一份对应的就是0.8dp。
当手机为720x300时就会引用sw300dp文件的dimens文件进行适配。如果当手机宽度为311dp时，
系统如果找不到sw311dp文件，就会找最小最接近的文件进行适配sw310dp文件。
这样确保即使遇到手机分辨率对应的文件不存在时，也能对屏幕进行适配。

3.今日头条
dp和px的转换公式为：px = dp * density
dp转换的场景都是通过DisplayMetrics来进行计算的，
DisplayMetrics#density 就是上述的density
DisplayMetrics#densityDpi 就是上述的dpi
DisplayMetrics#scaledDensity 字体的缩放因子，正常情况下和density相等，但是调节系统字体大小后会改变这个值

参考文章
https://blog.csdn.net/zhaokaiqiang1992/article/details/45419023

https://blog.csdn.net/xiebudong/article/details/37040263

https://www.bbsmax.com/A/kmzLL9yGzG/


问题1：如果只放一套图片，系统如何对图片的分辨率进行转换？
android系统加载图片资源遵循下面的规则：首先判断手机的屏幕密度，然后在相应的密度下文件夹中查找图片资源。
如果找到，则进行显示。如果找不到，则会从drawable或者其他drawable-*文件夹中寻找。
找到后，将文件夹所表示的密度与手机实际密度进行比较，从而缩放图片。
例如在drawable下找到资源（等价于从drawable-mdpi），
而手机又是hdpi的，这样android在显示图片时会将图片进行放大，以满足hdpi手机显示需要。不难想象，图片肯定会变模糊。

系统加载图片前先将图片进行缩放，因此你通过getwidth得到的尺寸已经是经过缩放的尺寸了。缩放比例与密度之比保持一致。

问题2：如果切图放错文件夹会有什么问题？
如果放错文件夹，系统会进行相应的缩放，使图片进行错误的缩放。例如hdpi的图片放到mdpi中，在hdpi的手机显示，会比原图片大
问题3:720p图片相关问题？

设计给切图，最好根据那个dpi呢？是都可以吗？一般应该给480*800的hdpi的切图。这样对于mdpi，可以自动缩小。
图像显示质量不受影响。对于xdpi，放大幅度不大，图像显示质量影响较小。

那么为什么不用xhdpi呢，这样都是缩小图像不是更好吗？
有两个理由，一是增大了apk的尺寸，另一个就是容易引起切图的变形，影响显示。
主要是对于.9的图片，有对某一方向进行了压缩，如果设置时，拉伸区域太小，
再压缩时可能变形。当然这也不是绝对的，可以通过增大.9.png文件的拉伸区域来实现。
或许还有个理由，xhpi的机型比较不占多数。

